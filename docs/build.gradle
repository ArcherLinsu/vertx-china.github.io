import org.apache.commons.codec.digest.DigestUtils

buildscript {
  dependencies {
    classpath "commons-codec:commons-codec:1.15"
  }
}

plugins {
  id 'java'
}

ext {
  versions = [
    "3.9.9",
    "3.9.8",
    "3.9.7",
    "3.9.6",
    "3.9.5",
    "3.9.4",
    "3.9.3",
    "3.9.2",
    "3.9.1",
    "3.9.0",
    "3.8.5",
    "3.8.4",
    "4.0.0",
    "4.0.2",
    "4.0.3",
    "4.1.0",
    "4.1.1",
    "4.1.2",
    "4.1.3",
    "4.1.4",
    "4.1.5",

    // latest GA release (must be the last entry)
    "4.2.0"
  ]

  extractApidocsTargetDir = project.hasProperty("extractApidocsTargetDir") ?
    project.getProperty("extractApidocsTargetDir") : "$projectDir/../public/docs"
}

repositories {
  jcenter()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots/"
    mavenContent {
      snapshotsOnly()
    }
  }
}

dependencies {
  implementation("io.vertx:vertx-stack-docs:${getVersionName(versions.last())}:docs@zip") {
    transitive = false
    changing = getVersionName(versions.last()).endsWith("-SNAPSHOT")
  }
}

def getVersionName(version) {
  if (version instanceof Map) {
    return version.version
  }
  return version
}

def getVersionPath(version) {
  if (version instanceof Map) {
    return version.path
  }
  return version
}

def versionToConfiguration(version) {
  return "implementation_${getVersionName(version).replace('.', '_')}"
}

versions.each { configurations.create(versionToConfiguration(it)) }
versions.each { v ->
  dependencies.add(versionToConfiguration(v), "io.vertx:vertx-stack-docs:${getVersionName(v)}:docs@zip") {
    transitive = false
    changing = getVersionName(v).endsWith("-SNAPSHOT")
  }
}

def writeHash(sourceFile, version) {
  def outDir = new File(projectDir, "hashes")
  outDir.mkdirs()
  def outFile = new File(outDir, "${getVersionPath(version)}.sha")
  outFile.text = new DigestUtils("sha-256").digestAsHex(sourceFile)
}
String[] excludePaths = ["**/jsdoc/**", "**/kdoc/**", "**/scaladocs/**"]
task extractDocsLatest(type: Sync) {
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.collect { zipTree(it) }
  }
  exclude(excludePaths)
  into "$projectDir/extracted"
  exclude "**/apidocs/**"
  configurations.runtimeClasspath.each { writeHash(it, "latest") }
}

task extractApidocsLatest(type: Sync) {
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.collect { zipTree(it) }
  }
  into extractApidocsTargetDir
  include "**/apidocs/**"
  includeEmptyDirs false
  preserve {
    include ".gitkeep"
  }
}

task extractDocs {
  dependsOn extractDocsLatest
}

task extractApidocsVersions

task extractApidocs {
  dependsOn extractApidocsLatest
  dependsOn extractApidocsVersions
}

versions.take(versions.size()).each { version ->
  def conf = configurations[versionToConfiguration(version)]

  // Use type: Copy instead of Sync so we don't overwrite files in the target directory
  def docsTask = tasks.create(name: "extractDocs_${getVersionName(version).replace('.', '_')}", type: Copy) {
    dependsOn conf
    from {
      conf.collect { zipTree(it) }
    }
    into "$projectDir/extracted/${getVersionPath(version)}"
    exclude "**/apidocs/**"
    exclude(excludePaths)
    conf.each { writeHash(it, version) }
  }
  extractDocs.dependsOn docsTask

  // Use type: Copy instead of Sync (see above)
  def apidocsTask = tasks.create(name: "extractApidocs_${getVersionName(version).replace('.', '_')}", type: Copy) {
    dependsOn conf
    from {
      conf.collect { zipTree(it) }
    }
    into "$extractApidocsTargetDir/${getVersionPath(version)}"
    include "**/apidocs/**"
    includeEmptyDirs false
  }
  extractApidocsVersions.dependsOn apidocsTask
  // do not delete our directory when extracting latest apidocs
  extractApidocsLatest.preserve.include(getVersionPath(version))
}

clean {
  delete "$projectDir/extracted"
  delete "$extractApidocsTargetDir/apidocs"
  doLast {
    versions.take(versions.size()).each { version ->
      delete "$extractApidocsTargetDir/${getVersionPath(version)}"
    }
  }
}

defaultTasks 'extractDocs', 'extractApidocs'
